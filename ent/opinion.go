// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"opinion/ent/opinion"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Opinion is the model entity for the Opinion schema.
type Opinion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Asunto holds the value of the "asunto" field.
	Asunto string `json:"asunto,omitempty"`
	// Contenido holds the value of the "contenido" field.
	Contenido string `json:"contenido,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status opinion.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OpinionQuery when eager-loading is set.
	Edges          OpinionEdges `json:"edges"`
	opinion_parent *int
}

// OpinionEdges holds the relations/edges for other nodes in the graph.
type OpinionEdges struct {
	// Children holds the value of the children edge.
	Children []*Opinion `json:"children,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Opinion `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e OpinionEdges) ChildrenOrErr() ([]*Opinion, error) {
	if e.loadedTypes[0] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OpinionEdges) ParentOrErr() (*Opinion, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: opinion.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Opinion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case opinion.FieldID:
			values[i] = new(sql.NullInt64)
		case opinion.FieldAsunto, opinion.FieldContenido, opinion.FieldStatus:
			values[i] = new(sql.NullString)
		case opinion.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case opinion.ForeignKeys[0]: // opinion_parent
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Opinion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Opinion fields.
func (o *Opinion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case opinion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case opinion.FieldAsunto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asunto", values[i])
			} else if value.Valid {
				o.Asunto = value.String
			}
		case opinion.FieldContenido:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contenido", values[i])
			} else if value.Valid {
				o.Contenido = value.String
			}
		case opinion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case opinion.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = opinion.Status(value.String)
			}
		case opinion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field opinion_parent", value)
			} else if value.Valid {
				o.opinion_parent = new(int)
				*o.opinion_parent = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChildren queries the "children" edge of the Opinion entity.
func (o *Opinion) QueryChildren() *OpinionQuery {
	return NewOpinionClient(o.config).QueryChildren(o)
}

// QueryParent queries the "parent" edge of the Opinion entity.
func (o *Opinion) QueryParent() *OpinionQuery {
	return NewOpinionClient(o.config).QueryParent(o)
}

// Update returns a builder for updating this Opinion.
// Note that you need to call Opinion.Unwrap() before calling this method if this Opinion
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Opinion) Update() *OpinionUpdateOne {
	return NewOpinionClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Opinion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Opinion) Unwrap() *Opinion {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Opinion is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Opinion) String() string {
	var builder strings.Builder
	builder.WriteString("Opinion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("asunto=")
	builder.WriteString(o.Asunto)
	builder.WriteString(", ")
	builder.WriteString("contenido=")
	builder.WriteString(o.Contenido)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Opinions is a parsable slice of Opinion.
type Opinions []*Opinion
