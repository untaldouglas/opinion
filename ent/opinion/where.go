// Code generated by ent, DO NOT EDIT.

package opinion

import (
	"opinion/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Opinion {
	return predicate.Opinion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Opinion {
	return predicate.Opinion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Opinion {
	return predicate.Opinion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Opinion {
	return predicate.Opinion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Opinion {
	return predicate.Opinion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Opinion {
	return predicate.Opinion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Opinion {
	return predicate.Opinion(sql.FieldLTE(FieldID, id))
}

// Asunto applies equality check predicate on the "asunto" field. It's identical to AsuntoEQ.
func Asunto(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldAsunto, v))
}

// Contenido applies equality check predicate on the "contenido" field. It's identical to ContenidoEQ.
func Contenido(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldContenido, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldCreatedAt, v))
}

// AsuntoEQ applies the EQ predicate on the "asunto" field.
func AsuntoEQ(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldAsunto, v))
}

// AsuntoNEQ applies the NEQ predicate on the "asunto" field.
func AsuntoNEQ(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldNEQ(FieldAsunto, v))
}

// AsuntoIn applies the In predicate on the "asunto" field.
func AsuntoIn(vs ...string) predicate.Opinion {
	return predicate.Opinion(sql.FieldIn(FieldAsunto, vs...))
}

// AsuntoNotIn applies the NotIn predicate on the "asunto" field.
func AsuntoNotIn(vs ...string) predicate.Opinion {
	return predicate.Opinion(sql.FieldNotIn(FieldAsunto, vs...))
}

// AsuntoGT applies the GT predicate on the "asunto" field.
func AsuntoGT(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldGT(FieldAsunto, v))
}

// AsuntoGTE applies the GTE predicate on the "asunto" field.
func AsuntoGTE(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldGTE(FieldAsunto, v))
}

// AsuntoLT applies the LT predicate on the "asunto" field.
func AsuntoLT(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldLT(FieldAsunto, v))
}

// AsuntoLTE applies the LTE predicate on the "asunto" field.
func AsuntoLTE(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldLTE(FieldAsunto, v))
}

// AsuntoContains applies the Contains predicate on the "asunto" field.
func AsuntoContains(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldContains(FieldAsunto, v))
}

// AsuntoHasPrefix applies the HasPrefix predicate on the "asunto" field.
func AsuntoHasPrefix(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldHasPrefix(FieldAsunto, v))
}

// AsuntoHasSuffix applies the HasSuffix predicate on the "asunto" field.
func AsuntoHasSuffix(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldHasSuffix(FieldAsunto, v))
}

// AsuntoEqualFold applies the EqualFold predicate on the "asunto" field.
func AsuntoEqualFold(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldEqualFold(FieldAsunto, v))
}

// AsuntoContainsFold applies the ContainsFold predicate on the "asunto" field.
func AsuntoContainsFold(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldContainsFold(FieldAsunto, v))
}

// ContenidoEQ applies the EQ predicate on the "contenido" field.
func ContenidoEQ(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldContenido, v))
}

// ContenidoNEQ applies the NEQ predicate on the "contenido" field.
func ContenidoNEQ(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldNEQ(FieldContenido, v))
}

// ContenidoIn applies the In predicate on the "contenido" field.
func ContenidoIn(vs ...string) predicate.Opinion {
	return predicate.Opinion(sql.FieldIn(FieldContenido, vs...))
}

// ContenidoNotIn applies the NotIn predicate on the "contenido" field.
func ContenidoNotIn(vs ...string) predicate.Opinion {
	return predicate.Opinion(sql.FieldNotIn(FieldContenido, vs...))
}

// ContenidoGT applies the GT predicate on the "contenido" field.
func ContenidoGT(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldGT(FieldContenido, v))
}

// ContenidoGTE applies the GTE predicate on the "contenido" field.
func ContenidoGTE(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldGTE(FieldContenido, v))
}

// ContenidoLT applies the LT predicate on the "contenido" field.
func ContenidoLT(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldLT(FieldContenido, v))
}

// ContenidoLTE applies the LTE predicate on the "contenido" field.
func ContenidoLTE(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldLTE(FieldContenido, v))
}

// ContenidoContains applies the Contains predicate on the "contenido" field.
func ContenidoContains(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldContains(FieldContenido, v))
}

// ContenidoHasPrefix applies the HasPrefix predicate on the "contenido" field.
func ContenidoHasPrefix(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldHasPrefix(FieldContenido, v))
}

// ContenidoHasSuffix applies the HasSuffix predicate on the "contenido" field.
func ContenidoHasSuffix(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldHasSuffix(FieldContenido, v))
}

// ContenidoEqualFold applies the EqualFold predicate on the "contenido" field.
func ContenidoEqualFold(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldEqualFold(FieldContenido, v))
}

// ContenidoContainsFold applies the ContainsFold predicate on the "contenido" field.
func ContenidoContainsFold(v string) predicate.Opinion {
	return predicate.Opinion(sql.FieldContainsFold(FieldContenido, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Opinion {
	return predicate.Opinion(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Opinion {
	return predicate.Opinion(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Opinion {
	return predicate.Opinion(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Opinion {
	return predicate.Opinion(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Opinion {
	return predicate.Opinion(sql.FieldNotIn(FieldStatus, vs...))
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Opinion {
	return predicate.Opinion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Opinion) predicate.Opinion {
	return predicate.Opinion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Opinion {
	return predicate.Opinion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Opinion) predicate.Opinion {
	return predicate.Opinion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Opinion) predicate.Opinion {
	return predicate.Opinion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Opinion) predicate.Opinion {
	return predicate.Opinion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Opinion) predicate.Opinion {
	return predicate.Opinion(func(s *sql.Selector) {
		p(s.Not())
	})
}
