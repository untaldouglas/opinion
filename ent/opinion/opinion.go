// Code generated by ent, DO NOT EDIT.

package opinion

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the opinion type in the database.
	Label = "opinion"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAsunto holds the string denoting the asunto field in the database.
	FieldAsunto = "asunto"
	// FieldContenido holds the string denoting the contenido field in the database.
	FieldContenido = "contenido"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// Table holds the table name of the opinion in the database.
	Table = "opinions"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "opinions"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "opinion_parent"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "opinions"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "opinion_parent"
)

// Columns holds all SQL columns for opinion fields.
var Columns = []string{
	FieldID,
	FieldAsunto,
	FieldContenido,
	FieldCreatedAt,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "opinions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"opinion_parent",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AsuntoValidator is a validator for the "asunto" field. It is called by the builders before save.
	AsuntoValidator func(string) error
	// ContenidoValidator is a validator for the "contenido" field. It is called by the builders before save.
	ContenidoValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActivo is the default value of the Status enum.
const DefaultStatus = StatusActivo

// Status values.
const (
	StatusActivo   Status = "ACTIVO"
	StatusInactivo Status = "INACTIVO"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActivo, StatusInactivo:
		return nil
	default:
		return fmt.Errorf("opinion: invalid enum value for status field: %q", s)
	}
}
