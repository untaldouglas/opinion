// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opinion/ent/opinion"
	"opinion/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOpinion = "Opinion"
)

// OpinionMutation represents an operation that mutates the Opinion nodes in the graph.
type OpinionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	asunto          *string
	contenido       *string
	created_at      *time.Time
	status          *opinion.Status
	clearedFields   map[string]struct{}
	children        map[int]struct{}
	removedchildren map[int]struct{}
	clearedchildren bool
	parent          *int
	clearedparent   bool
	done            bool
	oldValue        func(context.Context) (*Opinion, error)
	predicates      []predicate.Opinion
}

var _ ent.Mutation = (*OpinionMutation)(nil)

// opinionOption allows management of the mutation configuration using functional options.
type opinionOption func(*OpinionMutation)

// newOpinionMutation creates new mutation for the Opinion entity.
func newOpinionMutation(c config, op Op, opts ...opinionOption) *OpinionMutation {
	m := &OpinionMutation{
		config:        c,
		op:            op,
		typ:           TypeOpinion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOpinionID sets the ID field of the mutation.
func withOpinionID(id int) opinionOption {
	return func(m *OpinionMutation) {
		var (
			err   error
			once  sync.Once
			value *Opinion
		)
		m.oldValue = func(ctx context.Context) (*Opinion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Opinion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOpinion sets the old Opinion of the mutation.
func withOpinion(node *Opinion) opinionOption {
	return func(m *OpinionMutation) {
		m.oldValue = func(context.Context) (*Opinion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OpinionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OpinionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OpinionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OpinionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Opinion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAsunto sets the "asunto" field.
func (m *OpinionMutation) SetAsunto(s string) {
	m.asunto = &s
}

// Asunto returns the value of the "asunto" field in the mutation.
func (m *OpinionMutation) Asunto() (r string, exists bool) {
	v := m.asunto
	if v == nil {
		return
	}
	return *v, true
}

// OldAsunto returns the old "asunto" field's value of the Opinion entity.
// If the Opinion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OpinionMutation) OldAsunto(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAsunto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAsunto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAsunto: %w", err)
	}
	return oldValue.Asunto, nil
}

// ResetAsunto resets all changes to the "asunto" field.
func (m *OpinionMutation) ResetAsunto() {
	m.asunto = nil
}

// SetContenido sets the "contenido" field.
func (m *OpinionMutation) SetContenido(s string) {
	m.contenido = &s
}

// Contenido returns the value of the "contenido" field in the mutation.
func (m *OpinionMutation) Contenido() (r string, exists bool) {
	v := m.contenido
	if v == nil {
		return
	}
	return *v, true
}

// OldContenido returns the old "contenido" field's value of the Opinion entity.
// If the Opinion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OpinionMutation) OldContenido(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContenido is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContenido requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContenido: %w", err)
	}
	return oldValue.Contenido, nil
}

// ResetContenido resets all changes to the "contenido" field.
func (m *OpinionMutation) ResetContenido() {
	m.contenido = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OpinionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OpinionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Opinion entity.
// If the Opinion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OpinionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OpinionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetStatus sets the "status" field.
func (m *OpinionMutation) SetStatus(o opinion.Status) {
	m.status = &o
}

// Status returns the value of the "status" field in the mutation.
func (m *OpinionMutation) Status() (r opinion.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Opinion entity.
// If the Opinion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OpinionMutation) OldStatus(ctx context.Context) (v opinion.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *OpinionMutation) ResetStatus() {
	m.status = nil
}

// AddChildIDs adds the "children" edge to the Opinion entity by ids.
func (m *OpinionMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Opinion entity.
func (m *OpinionMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Opinion entity was cleared.
func (m *OpinionMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Opinion entity by IDs.
func (m *OpinionMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Opinion entity.
func (m *OpinionMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OpinionMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OpinionMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetParentID sets the "parent" edge to the Opinion entity by id.
func (m *OpinionMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Opinion entity.
func (m *OpinionMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Opinion entity was cleared.
func (m *OpinionMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *OpinionMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OpinionMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OpinionMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Where appends a list predicates to the OpinionMutation builder.
func (m *OpinionMutation) Where(ps ...predicate.Opinion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OpinionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OpinionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Opinion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OpinionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OpinionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Opinion).
func (m *OpinionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OpinionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.asunto != nil {
		fields = append(fields, opinion.FieldAsunto)
	}
	if m.contenido != nil {
		fields = append(fields, opinion.FieldContenido)
	}
	if m.created_at != nil {
		fields = append(fields, opinion.FieldCreatedAt)
	}
	if m.status != nil {
		fields = append(fields, opinion.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OpinionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case opinion.FieldAsunto:
		return m.Asunto()
	case opinion.FieldContenido:
		return m.Contenido()
	case opinion.FieldCreatedAt:
		return m.CreatedAt()
	case opinion.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OpinionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case opinion.FieldAsunto:
		return m.OldAsunto(ctx)
	case opinion.FieldContenido:
		return m.OldContenido(ctx)
	case opinion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case opinion.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Opinion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OpinionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case opinion.FieldAsunto:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAsunto(v)
		return nil
	case opinion.FieldContenido:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContenido(v)
		return nil
	case opinion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case opinion.FieldStatus:
		v, ok := value.(opinion.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Opinion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OpinionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OpinionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OpinionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Opinion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OpinionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OpinionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OpinionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Opinion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OpinionMutation) ResetField(name string) error {
	switch name {
	case opinion.FieldAsunto:
		m.ResetAsunto()
		return nil
	case opinion.FieldContenido:
		m.ResetContenido()
		return nil
	case opinion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case opinion.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Opinion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OpinionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.children != nil {
		edges = append(edges, opinion.EdgeChildren)
	}
	if m.parent != nil {
		edges = append(edges, opinion.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OpinionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case opinion.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case opinion.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OpinionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, opinion.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OpinionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case opinion.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OpinionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchildren {
		edges = append(edges, opinion.EdgeChildren)
	}
	if m.clearedparent {
		edges = append(edges, opinion.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OpinionMutation) EdgeCleared(name string) bool {
	switch name {
	case opinion.EdgeChildren:
		return m.clearedchildren
	case opinion.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OpinionMutation) ClearEdge(name string) error {
	switch name {
	case opinion.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Opinion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OpinionMutation) ResetEdge(name string) error {
	switch name {
	case opinion.EdgeChildren:
		m.ResetChildren()
		return nil
	case opinion.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown Opinion edge %s", name)
}
