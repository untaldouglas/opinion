// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opinion/ent/opinion"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OpinionCreate is the builder for creating a Opinion entity.
type OpinionCreate struct {
	config
	mutation *OpinionMutation
	hooks    []Hook
}

// SetAsunto sets the "asunto" field.
func (oc *OpinionCreate) SetAsunto(s string) *OpinionCreate {
	oc.mutation.SetAsunto(s)
	return oc
}

// SetContenido sets the "contenido" field.
func (oc *OpinionCreate) SetContenido(s string) *OpinionCreate {
	oc.mutation.SetContenido(s)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OpinionCreate) SetCreatedAt(t time.Time) *OpinionCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OpinionCreate) SetNillableCreatedAt(t *time.Time) *OpinionCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OpinionCreate) SetStatus(o opinion.Status) *OpinionCreate {
	oc.mutation.SetStatus(o)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OpinionCreate) SetNillableStatus(o *opinion.Status) *OpinionCreate {
	if o != nil {
		oc.SetStatus(*o)
	}
	return oc
}

// AddChildIDs adds the "children" edge to the Opinion entity by IDs.
func (oc *OpinionCreate) AddChildIDs(ids ...int) *OpinionCreate {
	oc.mutation.AddChildIDs(ids...)
	return oc
}

// AddChildren adds the "children" edges to the Opinion entity.
func (oc *OpinionCreate) AddChildren(o ...*Opinion) *OpinionCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Opinion entity by ID.
func (oc *OpinionCreate) SetParentID(id int) *OpinionCreate {
	oc.mutation.SetParentID(id)
	return oc
}

// SetNillableParentID sets the "parent" edge to the Opinion entity by ID if the given value is not nil.
func (oc *OpinionCreate) SetNillableParentID(id *int) *OpinionCreate {
	if id != nil {
		oc = oc.SetParentID(*id)
	}
	return oc
}

// SetParent sets the "parent" edge to the Opinion entity.
func (oc *OpinionCreate) SetParent(o *Opinion) *OpinionCreate {
	return oc.SetParentID(o.ID)
}

// Mutation returns the OpinionMutation object of the builder.
func (oc *OpinionCreate) Mutation() *OpinionMutation {
	return oc.mutation
}

// Save creates the Opinion in the database.
func (oc *OpinionCreate) Save(ctx context.Context) (*Opinion, error) {
	oc.defaults()
	return withHooks[*Opinion, OpinionMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OpinionCreate) SaveX(ctx context.Context) *Opinion {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OpinionCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OpinionCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OpinionCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := opinion.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := opinion.DefaultStatus
		oc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OpinionCreate) check() error {
	if _, ok := oc.mutation.Asunto(); !ok {
		return &ValidationError{Name: "asunto", err: errors.New(`ent: missing required field "Opinion.asunto"`)}
	}
	if v, ok := oc.mutation.Asunto(); ok {
		if err := opinion.AsuntoValidator(v); err != nil {
			return &ValidationError{Name: "asunto", err: fmt.Errorf(`ent: validator failed for field "Opinion.asunto": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Contenido(); !ok {
		return &ValidationError{Name: "contenido", err: errors.New(`ent: missing required field "Opinion.contenido"`)}
	}
	if v, ok := oc.mutation.Contenido(); ok {
		if err := opinion.ContenidoValidator(v); err != nil {
			return &ValidationError{Name: "contenido", err: fmt.Errorf(`ent: validator failed for field "Opinion.contenido": %w`, err)}
		}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Opinion.created_at"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Opinion.status"`)}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := opinion.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Opinion.status": %w`, err)}
		}
	}
	return nil
}

func (oc *OpinionCreate) sqlSave(ctx context.Context) (*Opinion, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OpinionCreate) createSpec() (*Opinion, *sqlgraph.CreateSpec) {
	var (
		_node = &Opinion{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(opinion.Table, sqlgraph.NewFieldSpec(opinion.FieldID, field.TypeInt))
	)
	if value, ok := oc.mutation.Asunto(); ok {
		_spec.SetField(opinion.FieldAsunto, field.TypeString, value)
		_node.Asunto = value
	}
	if value, ok := oc.mutation.Contenido(); ok {
		_spec.SetField(opinion.FieldContenido, field.TypeString, value)
		_node.Contenido = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(opinion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(opinion.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := oc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   opinion.ChildrenTable,
			Columns: []string{opinion.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   opinion.ParentTable,
			Columns: []string{opinion.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.opinion_parent = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OpinionCreateBulk is the builder for creating many Opinion entities in bulk.
type OpinionCreateBulk struct {
	config
	builders []*OpinionCreate
}

// Save creates the Opinion entities in the database.
func (ocb *OpinionCreateBulk) Save(ctx context.Context) ([]*Opinion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Opinion, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OpinionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OpinionCreateBulk) SaveX(ctx context.Context) []*Opinion {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OpinionCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OpinionCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
