// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"opinion/ent/opinion"
	"opinion/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OpinionUpdate is the builder for updating Opinion entities.
type OpinionUpdate struct {
	config
	hooks    []Hook
	mutation *OpinionMutation
}

// Where appends a list predicates to the OpinionUpdate builder.
func (ou *OpinionUpdate) Where(ps ...predicate.Opinion) *OpinionUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetAsunto sets the "asunto" field.
func (ou *OpinionUpdate) SetAsunto(s string) *OpinionUpdate {
	ou.mutation.SetAsunto(s)
	return ou
}

// SetContenido sets the "contenido" field.
func (ou *OpinionUpdate) SetContenido(s string) *OpinionUpdate {
	ou.mutation.SetContenido(s)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OpinionUpdate) SetStatus(o opinion.Status) *OpinionUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OpinionUpdate) SetNillableStatus(o *opinion.Status) *OpinionUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// AddChildIDs adds the "children" edge to the Opinion entity by IDs.
func (ou *OpinionUpdate) AddChildIDs(ids ...int) *OpinionUpdate {
	ou.mutation.AddChildIDs(ids...)
	return ou
}

// AddChildren adds the "children" edges to the Opinion entity.
func (ou *OpinionUpdate) AddChildren(o ...*Opinion) *OpinionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Opinion entity by ID.
func (ou *OpinionUpdate) SetParentID(id int) *OpinionUpdate {
	ou.mutation.SetParentID(id)
	return ou
}

// SetNillableParentID sets the "parent" edge to the Opinion entity by ID if the given value is not nil.
func (ou *OpinionUpdate) SetNillableParentID(id *int) *OpinionUpdate {
	if id != nil {
		ou = ou.SetParentID(*id)
	}
	return ou
}

// SetParent sets the "parent" edge to the Opinion entity.
func (ou *OpinionUpdate) SetParent(o *Opinion) *OpinionUpdate {
	return ou.SetParentID(o.ID)
}

// Mutation returns the OpinionMutation object of the builder.
func (ou *OpinionUpdate) Mutation() *OpinionMutation {
	return ou.mutation
}

// ClearChildren clears all "children" edges to the Opinion entity.
func (ou *OpinionUpdate) ClearChildren() *OpinionUpdate {
	ou.mutation.ClearChildren()
	return ou
}

// RemoveChildIDs removes the "children" edge to Opinion entities by IDs.
func (ou *OpinionUpdate) RemoveChildIDs(ids ...int) *OpinionUpdate {
	ou.mutation.RemoveChildIDs(ids...)
	return ou
}

// RemoveChildren removes "children" edges to Opinion entities.
func (ou *OpinionUpdate) RemoveChildren(o ...*Opinion) *OpinionUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Opinion entity.
func (ou *OpinionUpdate) ClearParent() *OpinionUpdate {
	ou.mutation.ClearParent()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OpinionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OpinionMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OpinionUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OpinionUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OpinionUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OpinionUpdate) check() error {
	if v, ok := ou.mutation.Asunto(); ok {
		if err := opinion.AsuntoValidator(v); err != nil {
			return &ValidationError{Name: "asunto", err: fmt.Errorf(`ent: validator failed for field "Opinion.asunto": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Contenido(); ok {
		if err := opinion.ContenidoValidator(v); err != nil {
			return &ValidationError{Name: "contenido", err: fmt.Errorf(`ent: validator failed for field "Opinion.contenido": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := opinion.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Opinion.status": %w`, err)}
		}
	}
	return nil
}

func (ou *OpinionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(opinion.Table, opinion.Columns, sqlgraph.NewFieldSpec(opinion.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Asunto(); ok {
		_spec.SetField(opinion.FieldAsunto, field.TypeString, value)
	}
	if value, ok := ou.mutation.Contenido(); ok {
		_spec.SetField(opinion.FieldContenido, field.TypeString, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(opinion.FieldStatus, field.TypeEnum, value)
	}
	if ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   opinion.ChildrenTable,
			Columns: []string{opinion.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   opinion.ChildrenTable,
			Columns: []string{opinion.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   opinion.ChildrenTable,
			Columns: []string{opinion.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   opinion.ParentTable,
			Columns: []string{opinion.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   opinion.ParentTable,
			Columns: []string{opinion.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opinion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OpinionUpdateOne is the builder for updating a single Opinion entity.
type OpinionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OpinionMutation
}

// SetAsunto sets the "asunto" field.
func (ouo *OpinionUpdateOne) SetAsunto(s string) *OpinionUpdateOne {
	ouo.mutation.SetAsunto(s)
	return ouo
}

// SetContenido sets the "contenido" field.
func (ouo *OpinionUpdateOne) SetContenido(s string) *OpinionUpdateOne {
	ouo.mutation.SetContenido(s)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OpinionUpdateOne) SetStatus(o opinion.Status) *OpinionUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OpinionUpdateOne) SetNillableStatus(o *opinion.Status) *OpinionUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// AddChildIDs adds the "children" edge to the Opinion entity by IDs.
func (ouo *OpinionUpdateOne) AddChildIDs(ids ...int) *OpinionUpdateOne {
	ouo.mutation.AddChildIDs(ids...)
	return ouo
}

// AddChildren adds the "children" edges to the Opinion entity.
func (ouo *OpinionUpdateOne) AddChildren(o ...*Opinion) *OpinionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the Opinion entity by ID.
func (ouo *OpinionUpdateOne) SetParentID(id int) *OpinionUpdateOne {
	ouo.mutation.SetParentID(id)
	return ouo
}

// SetNillableParentID sets the "parent" edge to the Opinion entity by ID if the given value is not nil.
func (ouo *OpinionUpdateOne) SetNillableParentID(id *int) *OpinionUpdateOne {
	if id != nil {
		ouo = ouo.SetParentID(*id)
	}
	return ouo
}

// SetParent sets the "parent" edge to the Opinion entity.
func (ouo *OpinionUpdateOne) SetParent(o *Opinion) *OpinionUpdateOne {
	return ouo.SetParentID(o.ID)
}

// Mutation returns the OpinionMutation object of the builder.
func (ouo *OpinionUpdateOne) Mutation() *OpinionMutation {
	return ouo.mutation
}

// ClearChildren clears all "children" edges to the Opinion entity.
func (ouo *OpinionUpdateOne) ClearChildren() *OpinionUpdateOne {
	ouo.mutation.ClearChildren()
	return ouo
}

// RemoveChildIDs removes the "children" edge to Opinion entities by IDs.
func (ouo *OpinionUpdateOne) RemoveChildIDs(ids ...int) *OpinionUpdateOne {
	ouo.mutation.RemoveChildIDs(ids...)
	return ouo
}

// RemoveChildren removes "children" edges to Opinion entities.
func (ouo *OpinionUpdateOne) RemoveChildren(o ...*Opinion) *OpinionUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Opinion entity.
func (ouo *OpinionUpdateOne) ClearParent() *OpinionUpdateOne {
	ouo.mutation.ClearParent()
	return ouo
}

// Where appends a list predicates to the OpinionUpdate builder.
func (ouo *OpinionUpdateOne) Where(ps ...predicate.Opinion) *OpinionUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OpinionUpdateOne) Select(field string, fields ...string) *OpinionUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Opinion entity.
func (ouo *OpinionUpdateOne) Save(ctx context.Context) (*Opinion, error) {
	return withHooks[*Opinion, OpinionMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OpinionUpdateOne) SaveX(ctx context.Context) *Opinion {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OpinionUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OpinionUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OpinionUpdateOne) check() error {
	if v, ok := ouo.mutation.Asunto(); ok {
		if err := opinion.AsuntoValidator(v); err != nil {
			return &ValidationError{Name: "asunto", err: fmt.Errorf(`ent: validator failed for field "Opinion.asunto": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Contenido(); ok {
		if err := opinion.ContenidoValidator(v); err != nil {
			return &ValidationError{Name: "contenido", err: fmt.Errorf(`ent: validator failed for field "Opinion.contenido": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := opinion.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Opinion.status": %w`, err)}
		}
	}
	return nil
}

func (ouo *OpinionUpdateOne) sqlSave(ctx context.Context) (_node *Opinion, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(opinion.Table, opinion.Columns, sqlgraph.NewFieldSpec(opinion.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Opinion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, opinion.FieldID)
		for _, f := range fields {
			if !opinion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != opinion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Asunto(); ok {
		_spec.SetField(opinion.FieldAsunto, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Contenido(); ok {
		_spec.SetField(opinion.FieldContenido, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(opinion.FieldStatus, field.TypeEnum, value)
	}
	if ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   opinion.ChildrenTable,
			Columns: []string{opinion.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   opinion.ChildrenTable,
			Columns: []string{opinion.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   opinion.ChildrenTable,
			Columns: []string{opinion.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   opinion.ParentTable,
			Columns: []string{opinion.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   opinion.ParentTable,
			Columns: []string{opinion.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: opinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Opinion{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opinion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
